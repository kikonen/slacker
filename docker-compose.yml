version: '3.3'

services:
  nginx:
    container_name: nginx
    image: nginx:1.21.6-alpine
    volumes:
     - ./nginx/reverse_proxy.conf:/etc/nginx/conf.d/default.conf
    networks:
      - frontend
      - backend
    ports:
      - "127.0.0.1:${NGINX_PORT}:8080"
    command: ['nginx', '-g', 'daemon off;']

  api:
    container_name: api
    environment:
      NODE_PATH: /node_modules
      SERVER_PORT: "3100"
      KAFKA_HOST: kafka:9092
    logging:
      options:
        max-size: "1m"
        max-file: "2"
    working_dir: /app
    labels:
      ports: "3100"
    networks:
      - backend
    depends_on:
      - db
      - nginx

  auth:
    container_name: auth
    environment:
      NODE_PATH: /node_modules
      SERVER_PORT: "3200"
      OAUTH_API: https://accounts.google.com/o/oauth2/v2/auth
    logging:
      options:
        max-size: "1m"
        max-file: "2"
    working_dir: /app
    labels:
      ports: "3200"
    networks:
      - backend
    depends_on:
      - api
      - nginx

  ui:
    container_name: ui
    environment:
      PORT: "80"
      WDS_SOCKET_PATH: /ui/sockjs-node
    logging:
      options:
        max-size: "1m"
        max-file: "2"
    working_dir: /app
    labels:
      ports: "80"
    networks:
      - backend
    depends_on:
      - api
      - auth
      - nginx

  db:
    container_name: db
    image: postgres:13.2
    restart: always
    environment:
      PGDATA: /data/db
    logging:
      options:
        max-size: "1m"
        max-file: "2"
    labels:
      ports: "5432"
    networks:
      - backend
    volumes:
    - postgres_data:/data

  zookeeper:
    container_name: zookeeper
    image: "docker.io/bitnami/zookeeper:3"
    logging:
      options:
        max-size: "1m"
        max-file: "2"
    volumes:
      - "zookeeper_data:/bitnami"
    labels:
      ports: "2181"
    networks:
      - backend
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"

  kafka:
    container_name: kafka
    image: "docker.io/bitnami/kafka:latest"
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "yes"
    logging:
      options:
        max-size: "1m"
        max-file: "2"
    volumes:
      - "kafka_data:/bitnami"
      - ./kafka/server.properties:/bitnami/kafka/config/server.properties
    labels:
      ports: "9092"
    networks:
      - backend
    depends_on:
      - zookeeper
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3

  ksqldb-server:
    container_name: ksqldb-server
    image: confluentinc/ksqldb-server:0.15.0
    hostname: ksqldb-server
    profiles: ["development"]
    networks:
      - backend
    depends_on:
      - kafka
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: kafka:9092
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
    logging:
      options:
        max-size: "1m"
        max-file: "2"
    labels:
      ports: "8088"

  ksqldb-cli:
    container_name: ksqldb-cli
    image: confluentinc/ksqldb-cli:0.15.0
    profiles: ["development"]
    networks:
      - backend
    depends_on:
      - kafka
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true
    logging:
      options:
        max-size: "1m"
        max-file: "2"

  schema:
    container_name: schema
    profiles: ["development", "schema"]
    environment:
      SERVER_MODE: debug
    logging:
      options:
        max-size: "1m"
        max-file: "2"
    working_dir: /app
    networks:
      - backend
    volumes:
    - schema_log:/app/log
    - schema_tmp:/app/tmp
    depends_on:
      - db

  adminer:
    container_name: adminer
    image: adminer
    profiles: ["development"]
    restart: always
    logging:
      options:
        max-size: "1m"
        max-file: "2"
    labels:
      ports: "8080"
    networks:
      - backend

networks:
  frontend:
  backend:

volumes:
  postgres_data:
  zookeeper_data:
  kafka_data:
  schema_log:
  schema_tmp:
