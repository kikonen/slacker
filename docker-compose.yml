version: '3.3'

services:
  nginx:
    image: nginx:1.19.9
    container_name: nginx
    volumes:
     - ./nginx/nginx.conf:/etc/nginx/nginx.conf_NOPE
     - ./nginx/reverse_proxy.conf:/etc/nginx/conf.d/default.conf
    networks:
      - default
    ports:
      - "8080:8080"
    depends_on:
      - api
      - auth
      - ui
    command: ['nginx', '-g', 'daemon off;']

  api:
    build:
      context: ./api-service
      dockerfile: Dockerfile
    container_name: api
    ports:
      - "3100"
    environment:
      NODE_PATH: /node_modules
      SERVER_PORT: "3100"
      PGHOST: db
      PGUSER : postgres
      PGPASSWORD: password
      PGDATABASE: slacker
      KAFKA_HOST: kafka:9092
    logging:
      options:
        max-size: "1m"
        max-file: "2"
    working_dir: /app
    volumes:
    - ./api-service:/app
    networks:
      - default
    depends_on:
      - db
    command: sh -c "yarn run dev"

  auth:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth
    ports:
      - "3200"
    environment:
      NODE_PATH: /node_modules
      SERVER_PORT: "3200"
      PGHOST: db
      PGUSER : postgres
      PGPASSWORD: password
      PGDATABASE: slacker
      OAUTH_API: https://accounts.google.com/o/oauth2/v2/auth
      OAUTH_REDIRECT_URI: http://localhost:8080/auth/callback
    logging:
      options:
        max-size: "1m"
        max-file: "2"
    working_dir: /app
    volumes:
    - ./auth-service:/app
    networks:
      - default
    depends_on:
      - api
    command: sh -c "yarn run dev"

  ui:
    build:
      context: ./ui-service
      dockerfile: Dockerfile
    container_name: ui
    ports:
      - "80"
    environment:
      NODE_PATH: /node_modules
      PORT: "80"
      WDS_SOCKET_PATH: /ui/sockjs-node
    logging:
      options:
        max-size: "1m"
        max-file: "2"
    working_dir: /app
    volumes:
    - ./ui-service:/app
    networks:
      - default
    depends_on:
      - api
      - auth
    command: sh -c "yarn run dev"

  db:
    image: postgres:13.2
    container_name: db
    restart: always
    environment:
      PGDATA: /data/db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: slacker
    logging:
      options:
        max-size: "1m"
        max-file: "2"
    volumes:
    - postgres_data:/data
    networks:
      - default
    ports:
      - "5432"

  zookeeper:
    image: "docker.io/bitnami/zookeeper:3"
    container_name: zookeeper
    ports:
      - "2181"
    logging:
      options:
        max-size: "1m"
        max-file: "2"
    volumes:
      - "zookeeper_data:/bitnami"
    networks:
      - default
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"

  kafka:
    image: "docker.io/bitnami/kafka:latest"
    container_name: kafka
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "yes"
    logging:
      options:
        max-size: "1m"
        max-file: "2"
    volumes:
      - "kafka_data:/bitnami"
      - ./kafka/server.properties:/bitnami/kafka/config/server.properties
    networks:
      - default
    ports:
      - "9092"
    depends_on:
      - zookeeper
    deploy:
      restart_policy:
        condition: on-failure
        delay: 18s
        max_attempts: 2
        window: 30s

  ksqldb-server:
    image: confluentinc/ksqldb-server:0.15.0
    hostname: ksqldb-server
    container_name: ksqldb-server
    profiles: ["dev"]
    depends_on:
      - kafka
    ports:
      - "8088"
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: kafka:9092
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
    logging:
      options:
        max-size: "1m"
        max-file: "2"

  ksqldb-cli:
    image: confluentinc/ksqldb-cli:0.15.0
    container_name: ksqldb-cli
    profiles: ["dev"]
    depends_on:
      - kafka
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true
    logging:
      options:
        max-size: "1m"
        max-file: "2"

  schema:
    build: ./schema
    container_name: schema
    profiles: ["dev", "schema"]
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: slacker
    logging:
      options:
        max-size: "1m"
        max-file: "2"
    working_dir: /app
    volumes:
    - ./schema:/app
    depends_on:
      - db
    command: sh -c "sleep infinity"

  adminer:
    image: adminer
    container_name: adminer
    profiles: ["dev"]
    restart: always
    logging:
      options:
        max-size: "1m"
        max-file: "2"
    networks:
      - default
    ports:
      - "8080"

volumes:
  postgres_data:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
