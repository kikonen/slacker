# TODO
- sketch react
- command logic to allow join/leave channel
- "me" API for getting info/controlling current user
- Separate APIs for events
** "events" for new events
** "history" for "past events"
- Handle all commnads also as events
** enqeue them into private channel of user
** in web UI side do actions based into "event type" (command, message, etc.)
** i.e. allows another user to send "invite", which will then become as event for another user
   and refresh their UI
- React: show user profile
- React: show user info
- React: list channels
- React: join channel
- React: leave channel
- React: send message to channel
- React: edit message
- basic i18n logic
- commit events API
** commit tracking *needs* to be per web client instance, not just per channel
- logic for canceling old subscriptions after SSE closes
- events sent to UI need to have channel indicated to track race conditions
- track "already received" events in UI (via id)
- Extra CSS to be own asset; not silly CSS embedded in JS
- Add SASS
- discard postcss
- closing of stale SSE sockets in server side
- elasticsearch for kafka
- kafka-node vs. node-rdkafka

# WONT
- User registration email sending for new users

# DONE
- DB schema
- DB
- docker compose profiles
- websocket
** going with SSE instead
- sketch models using Sequelize
- postgres setup
- oauth register user
- JWT validator class
- validate JWT always
- add fast-jwt
- add remaining sequelize models
- sketch system@system user auth => api logi
- ChannelState to track "read" pointers per user
- experiment kafka
- middleware for validating JWT
- separate express.Router for each controller
- remove "event" from DB schema; kafka is enough
